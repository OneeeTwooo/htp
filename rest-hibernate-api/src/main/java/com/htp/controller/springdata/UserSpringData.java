package com.htp.controller.springdata;

import com.htp.controller.requests.UserCreateRequest;
import com.htp.domain.User;
import com.htp.repository.springdata.RoleDataImpl;
import com.htp.repository.springdata.UserDataImpl;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import springfox.documentation.annotations.ApiIgnore;

import java.sql.Timestamp;
import java.util.Date;
import java.util.Optional;

@RestController
@CrossOrigin
@RequestMapping(value = "/rest/springdata/users")
public class UserSpringData {

  @Autowired
  @Qualifier("userDataImpl")
  private UserDataImpl userData;

  @Autowired
  @Qualifier("roleDataImpl")
  private RoleDataImpl roleData;

  @GetMapping("/all")
  @ResponseStatus(HttpStatus.OK)
  public ResponseEntity<Page<User>> getUsers(@ApiIgnore Pageable pageable) {
    return new ResponseEntity<>(userData.findAll(pageable), HttpStatus.OK);
  }

  @RequestMapping(value = "/{id}", method = RequestMethod.GET)
  public ResponseEntity<Optional<User>> getUserById(
      @ApiParam("User Path Id") @PathVariable Long id) {
    Optional<User> user = userData.findById(id);
    return new ResponseEntity<>(user, HttpStatus.OK);
  }

  @PostMapping
  //  @Transactional
  @ResponseStatus(HttpStatus.CREATED)
  public ResponseEntity<User> createUser(@RequestBody UserCreateRequest request) {
    User user = new User();
    Date date = new Date();
    // userID is empty - will be generated by DB
    user.setFirstName(request.getFirstName());
    user.setLastName(request.getLastName());
    user.setPassportId(request.getPassportId());
    user.setPhoneNumber(request.getPhoneNumber());
    user.setUserName(request.getUserName());
    user.setUserPassword(request.getUserPassword());
    user.setCreatedWhen(new Timestamp(date.getTime()));
    user.setModifyWhen(new Timestamp(date.getTime()));
    user.setIsDeleted("NO");

    if (roleData.findById(request.getRoleId()).isPresent()) {
      user.setRole(roleData.findById(request.getRoleId()).get());
    }

    User savedUser = userData.saveAndFlush(user);

    return new ResponseEntity<>(savedUser, HttpStatus.OK);
  }

  @ApiOperation(value = "Update user by userID")
  @ApiResponses({
    @ApiResponse(code = 200, message = "Successful user update"),
    @ApiResponse(code = 400, message = "Invalid User ID supplied"),
    @ApiResponse(code = 404, message = "User was not found"),
    @ApiResponse(code = 500, message = "Server error, something wrong")
  })
  @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
  @ResponseStatus(HttpStatus.OK)
  public ResponseEntity<User> updateUser(
      @PathVariable("id") Long userId, @RequestBody UserCreateRequest request) {
    User user = userData.findById(userId).get();
    Date date = new Date();
    user.setFirstName(request.getFirstName());
    user.setLastName(request.getLastName());
    user.setPassportId(request.getPassportId());
    user.setPhoneNumber(request.getPhoneNumber());
    user.setUserName(request.getUserName());
    user.setUserPassword(request.getUserPassword());
    user.setCreatedWhen(user.getCreatedWhen());
    user.setModifyWhen(new Timestamp(date.getTime()));
    user.setIsDeleted(request.getIsDeleted());

    user.setRole(roleData.findById(request.getRoleId()).get());

    userData.saveAndFlush(user);

    return new ResponseEntity<>(user, HttpStatus.OK);
  }

  @DeleteMapping("/{id}")
  @ResponseStatus(HttpStatus.OK)
  public ResponseEntity<Long> deleteUser(@PathVariable("id") Long userId) {
    userData.deleteById(userId);
    return new ResponseEntity<>(userId, HttpStatus.OK);
  }
}
