package com.htp.controller;

import com.htp.controller.requests.UserCreateRequest;
import com.htp.domain.User;
import com.htp.repository.UserDao;
import io.swagger.annotations.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.*;

import java.sql.Timestamp;
import java.util.Date;
import java.util.List;

@RestController
@CrossOrigin
@RequestMapping(value = "/rest/users")
public class UserController {
  @Autowired private UserDao userDao;

  @GetMapping
  @ResponseStatus(HttpStatus.OK)
  public ResponseEntity<List<User>> getUsers() {
    return new ResponseEntity<>(userDao.findAll(), HttpStatus.OK);
  }

  @PostMapping
  @Transactional
  @ResponseStatus(HttpStatus.CREATED)
  public ResponseEntity<User> createUser(@RequestBody UserCreateRequest request) {
    User user = new User();
    Date date = new Date();
    // userId is empty - will be generated by DB

    user.setFirstName(request.getFirstName());
    user.setLastName(request.getLastName());
    user.setPassportId(request.getPassportId());
    user.setPhoneNumber(request.getPhoneNumber());
    user.setUserName(request.getUserName());
    user.setUserPassword(request.getUserPassword());
    user.setCreatedWhen(new Timestamp(date.getTime()));
    user.setModifyWhen(new Timestamp(date.getTime()));
    user.setIsDeleted("NO");
    User savedUser = userDao.save(user);

    return new ResponseEntity<>(savedUser, HttpStatus.OK);
  }

  @ApiOperation(value = "Get user from server by id")
  @ApiResponses({
    @ApiResponse(code = 200, message = "Successful getting user"),
    @ApiResponse(code = 400, message = "Invalid User ID supplied"),
    @ApiResponse(code = 401, message = "Lol kek"),
    @ApiResponse(code = 404, message = "User was not found"),
    @ApiResponse(code = 500, message = "Server error, something wrong")
  })
  @RequestMapping(value = "/{id}", method = RequestMethod.GET)
  public ResponseEntity<User> getUserById(@ApiParam("User Id") @PathVariable Long id) {
    User user = userDao.findById(id);
    return new ResponseEntity<>(user, HttpStatus.OK);
  }

  @ApiOperation(value = "Update user by userId")
  @ApiResponses({
    @ApiResponse(code = 200, message = "Successful user update"),
    @ApiResponse(code = 400, message = "Invalid User ID supplied"),
    @ApiResponse(code = 404, message = "User was not found"),
    @ApiResponse(code = 500, message = "Server error, something wrong")
  })
  @ApiImplicitParams({
    @ApiImplicitParam(
        name = "X-Auth-Token",
        value = "token",
        required = true,
        dataType = "string",
        paramType = "header")
  })
  // TODO: FOR WHAT THIS?
  @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
  @ResponseStatus(HttpStatus.OK)
  public ResponseEntity<User> updateUser(
      @PathVariable("id") Long userId, @RequestBody UserCreateRequest request) {
    User user = userDao.findById(userId);
    Date date = new Date();
    // userId is empty - will be generated by DB

    user.setFirstName(request.getFirstName());
    user.setLastName(request.getLastName());
    user.setPassportId(request.getPassportId());
    user.setPhoneNumber(request.getPhoneNumber());
    user.setUserName(request.getUserName());
    user.setUserPassword(request.getUserPassword());
    user.setCreatedWhen(user.getCreatedWhen());
    user.setModifyWhen(new Timestamp(date.getTime()));
    user.setIsDeleted(request.getIsDeleted());

    userDao.update(user);

    return new ResponseEntity<>(user, HttpStatus.OK);
  }

  @DeleteMapping("/{id}")
  @ResponseStatus(HttpStatus.OK)
  public ResponseEntity<Long> deleteUser(@PathVariable("id") Long userId) {
    userDao.delete(userId);
    return new ResponseEntity<>(userId, HttpStatus.OK);
  }
}
